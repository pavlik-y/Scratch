#include "blinker.h"

#define UPDATE_INTERVAL 20

Blinker::Blinker(Adafruit_NeoPixel* strip, Adafruit_LSM9DS0* sensor)
    : strip_(strip),
      sensor_(sensor),
      last_update_time_(0),
      sequence_idx_(0),
      direction_(1) { 
}

void Blinker::Start() {
  last_update_time_ = millis();
  sequence_idx_ = 0;
  ShowPattern(0);
}

void Blinker::Stop() {
  strip_->clear();
  strip_->setBrightness(255);
  strip_->show();
}

void Blinker::Tick() {
  unsigned long now = millis();
  if (now - last_update_time_ < interval_)
    return;
  last_update_time_ = now;
  AdvanceIndex();
  ShowPattern(sequence_idx_);  
}

void Blinker::SetPattern(unsigned long interval, int len, const PROGMEM byte* pattern, bool wrap_around) {
  interval_ = interval;
  pattern_len_ = len;
  pattern_ = pattern;
  wrap_around_ = wrap_around;  
}

const PROGMEM byte rgb_pattern[] = {
  0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2,
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4 
};

const PROGMEM byte slon_pattern[] = {
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 

  0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x09, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x09, 0x00, 0x00, 
  
  0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 
  
  0x00, 0x00, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
  
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void Blinker::SetPredefinedPattern(int index) {
  if (index == 0) {
    SetPattern(15, 25, slon_pattern, false);
  }
}

void Blinker::AdvanceIndex() {
  if (wrap_around_) {
    sequence_idx_ = (sequence_idx_ + 1) % pattern_len_;
    return;
  }
  if (sequence_idx_ == 0) {
    direction_ = 1;
  } else if (sequence_idx_ == pattern_len_ - 1) {
    direction_ = -1;
  }
  sequence_idx_ += direction_;
}

void Blinker::ShowPattern(int idx) {
  PROGMEM byte* frame_ptr = pattern_ + 11*idx;
  byte two_pixels;
  for (int pixel_idx = 0; pixel_idx < 21; pixel_idx++) {
    byte pixel;
    if (pixel_idx % 2 == 0) {
      two_pixels = pgm_read_byte(frame_ptr + pixel_idx / 2);
      pixel = two_pixels & 0xf;
    } else {
      pixel = two_pixels >> 4;
    }
    int level = pixel & 8 ? 255 : 128;
    int r = pixel & 1 ? level : 0;
    int g = pixel & 2 ? level : 0;
    int b = pixel & 4 ? level : 0;
    strip_->setPixelColor(pixel_idx, r, g, b);
  }
  strip_->show();
}


