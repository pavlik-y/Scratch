#include "blinker.h"

MotionDisplay::MotionDisplay(Adafruit_NeoPixel* strip, Adafruit_LSM9DS0* sensor)
    : strip_(strip),
      sensor_(sensor),
      sequence_start_time_(0),
      current_frame_(0),
      direction_(1) { 
}

void MotionDisplay::Start() {
  sequence_start_time_ = millis();
  current_frame_ = 0;
  ShowPattern(0);
}

void MotionDisplay::Stop() {
  strip_->clear();
  strip_->setBrightness(255);
  strip_->show();
}

void MotionDisplay::Tick() {
  unsigned long now = millis();
  sensor_->readGyro();
  long gyro = (long)sensor_->gyroData.z;
  if (gyro * direction_ > 5000) {
    direction_ = -direction_;
    if (direction_ == 1)
      RestartSequence(now);
  }
  
  int frame_to_show = (now - sequence_start_time_) * (pattern_len_ - 1) * 2 / sequence_interval_;
  if (frame_to_show != current_frame_) {
    current_frame_ = frame_to_show;
    ShowFrame(current_frame_);
  }
}

void MotionDisplay::ShowFrame(int frame_idx) {
  if (frame_idx < pattern_len_ - 1) {
    ShowPattern(frame_idx);
    return;
  }
  if (frame_idx < (pattern_len_ - 1) * 2) {
    ShowPattern(2 * (pattern_len_ - 1) - frame_idx);
    return;
  }
  strip_->clear();
  strip_->show();
}

void MotionDisplay::RestartSequence(unsigned long now) {
  sequence_interval_ = now - sequence_start_time_;
  sequence_start_time_ = now;
  Serial.print(sequence_interval_);
  Serial.println();
}

void MotionDisplay::SetPattern(int len, const PROGMEM byte* pattern) {
  pattern_len_ = len;
  pattern_ = pattern;
}

const PROGMEM byte rgb_pattern[] = {
  0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2,
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4 
};

const PROGMEM byte slon_pattern[] = {
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 

  0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x09, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x09, 0x00, 0x00, 
  
  0x00, 0x00, 0x00, 0x00, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 
  
  0x00, 0x00, 0x0a, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0a, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
  
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void MotionDisplay::SetPredefinedPattern(int index) {
  if (index == 0) {
    SetPattern(25, slon_pattern);
  }
}

void MotionDisplay::AdvanceIndex() {
}

void MotionDisplay::ShowPattern(int idx) {
  PROGMEM byte* frame_ptr = pattern_ + 11*idx;
  byte two_pixels;
  for (int pixel_idx = 0; pixel_idx < 21; pixel_idx++) {
    byte pixel;
    if (pixel_idx % 2 == 0) {
      two_pixels = pgm_read_byte(frame_ptr + pixel_idx / 2);
      pixel = two_pixels & 0xf;
    } else {
      pixel = two_pixels >> 4;
    }
    int level = pixel & 8 ? 255 : 128;
    int r = pixel & 1 ? level : 0;
    int g = pixel & 2 ? level : 0;
    int b = pixel & 4 ? level : 0;
    strip_->setPixelColor(pixel_idx, r, g, b);
  }
  strip_->show();
}


